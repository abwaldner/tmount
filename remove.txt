
      Before running the "Remove" command, the application checks if
  the specified device is in use.  The default command does nothing, and is
  called only to perform this test and display its result.  This is almost
  always enough (see, however, the note in the README file).
      However, you can configure "remove" by using the "eject" program from
  the "util-linux" package.  Take the script "remove1.sh" from the directory
  /usr/share/tmount/examples/, place it at any place available for execution
  and edit the "Remove" field in the application settings dialog.  Ensure
  write access to the device file.  You can, for example, put a file
  65-plugdev.rules from the same directory to the directory /etc/udev/rules.d/
  to change the device file group to "plugdev".  Users of "udevil" and
  "pmount" should be already in this group.  ("65" provides the execution of
  the rules after the "60-persistent-storage.rules" set).  Or "sudo" users who
  have the right to execute the command "eject" without entering a password,
  can edit the script, replacing the call of "eject ..." with
  "sudo -n eject ...".  Or you can use any of the ways to execute the command
  through "su" or "sudo", demonstrated in the examples in the above-mentioned
  directory.
      Applying "eject" to devices that do not have the "removable" attribute,
  for example, to external USB SDD, ends successfully, but does not render
  necessary action.  The device just reconnects, that when automount mode is
  on or working external automounter creates troubles.  Therefore, the script
  simply refuses do it.
      You can disable such devices by writing to the corresponding sysfs file,
  as the "udisk" program does (see remove2.sh), however do it is strongly not
  recommended.
