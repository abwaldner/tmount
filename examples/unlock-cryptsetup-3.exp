#!/usr/bin/env expect

  set Cmd /sbin/cryptsetup
  set Ask tmount-askpass.sh ;# should be in the same directory

  proc Dlg { Res args } {
    upvar $Res R
    set L { --title tmount --window-icon /usr/share/pixmaps/tmount.png }
    set R [
      if [ set C [ catch { exec qarma 2>/dev/null {*}$L {*}$args } S ] ] {
        puts stderr [ regsub {^child .*abnormally$} $S Cancelled. ]
      } else { set S
      };#fi
    ]
    return $C
  };# Dlg

  proc Mode {} {
    Dlg M --forms --text {LUKS passphrase input method:} \
          --add-combo Select --combo-values {Interactive|Key File}
    return [ string tolower [ string range $M 0 0 ] ]
  };# Mode

  proc Psw { Prompt } {
    if [ Dlg P --entry --hide-text --text $Prompt ] { set P "\004" };#fi
    return "${P}\n"
  };# Psw

  proc FSel {} {
    Dlg F --file-selection --title {tmount - Select a key file}
    return $F
  };# FSel

  proc NoFS { Dev } {
    set P {E: ID_FS_USAGE=filesystem}
    return [ catch { exec udevadm info $Dev | grep -Fxq $P } ]
  };# NoFS

  proc GenMN { Dev } { ;# generate cryptsetups map name
    set M [ file tail $Dev ]
    set M [ regsub -all {[^[:alnum:]#+-.:=@]|[^[:ascii:]]} $M {_} ]
    return [ exec mktemp -u -p /dev/mapper "${M}-XXX" ]
  };# GenMN

  proc Prop { Dev N } { ;# get property for device
    if [ catch { exec lsblk -no $N $Dev } P ] { set P {} };#fi
    return [ set P ]
  };# Prop

  set RetC 1 ; set SN [ info script ]
  set Dev [ lindex $argv end ]
  set Lnk [ GenMN $Dev ] ; set Map [ file tail $Lnk ]
  set Cmd "sudo -A ${Cmd} open"
  set Mode [
    set M [ lindex $argv 0 ]
    if { $argc == 2 && $M in { -k -i -a } } { string range $M 1 1
    } elseif { $argc == 1 } { expr {{a}}
    };#fi
  ]

  if { $Mode eq {} } {
    puts stderr [
      format {Usage: %s [-k|-i|-a] {device|file}} [ file tail $SN ]
    ]
  };#fi

  if { $Mode eq {a} } { set Mode [ Mode ] };#fi

  if { $Mode eq {k} } {
    set KeyF [ FSel ]
    if { $KeyF ne {} } { append Cmd { -d} } else { set Mode {} };#fi
  };#fi

  if { $Mode ne {} } {

    set env(SUDO_ASKPASS) [ file join [ file dirname $SN ] $Ask ]
    set timeout -1 ; log_user 0 ; set Err {}
    set LC $env(LC_ALL) ; set env(LC_ALL) {C}

    if { $Mode eq {k} } {
      spawn {*}$Cmd $KeyF $Dev $Map } else { spawn {*}$Cmd $Dev $Map
    };#fi
    expect {
      {Enter passphrase for *: } {
        exp_send [ Psw "Enter LUKS passphrase for ${Dev}" ] ; exp_continue
      }
      full_buffer { append Err $expect_out(buffer) ; exp_continue }
      eof { append Err $expect_out(buffer) }
    };#done
    set RetC [ lrange [ wait ] 3 3 ] ; set env(LC_ALL) $LC

    if { $RetC } { puts stderr $Err
    } else {
      set F [ Prop $Lnk FSTYPE ] ; regsub {^$} $F {(no FS)}    F
      set L [ Prop $Lnk LABEL  ] ; regsub {^$} $L {(no label)} L
      set S [ Prop $Lnk SIZE   ] ; set R [ exec realpath $Lnk ]
      set X "Device %s mapped to %s.\n%s -> %s\n%s (%s, \[%s], %s)"
      puts [ format $X $Dev $Map $Lnk $R [ file tail $R ] $F $L $S ]
      set C TMOUNT_Mount_command
      set C [ expr { [ info exist env($C) ] ? $env($C) : {} } ]
      regsub {^$} $C { sh -c "! echo Mounting disabled for ${0} >\&2" } C
      if { ! [ NoFS $R ] } {
        set RetC [ catch { exec -ignorestderr -- {*}$C $R } ]
        puts "mounted on [ Prop $R MOUNTPOINT ]"
      };#fi
    };#fi

  };#fi

exit $RetC
