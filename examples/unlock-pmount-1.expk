#!/usr/bin/env wish

  package require Expect

  proc Dlg {} {
   global RetC
   set x [ expr { [ winfo screenwidth   . ] - [ winfo reqwidth  . ] } ]
   set x [ expr { $x / 2 - [ winfo vrootx . ] } ]
   set y [ expr { [ winfo screenheight  . ] - [ winfo reqheight . ] } ]
   set y [ expr { $y / 2 - [ winfo vrooty . ] } ]
   wm geom . +$x+$y ; wm deiconify . ; focus .ent ; tkwait var RetC
   catch { wm withdraw . }
   if { $RetC } { puts stderr Cancelled. };#fi
   return $RetC
  };# Dlg

  proc Psw { Prompt } {
    global Psw
    .lbl configure -text $Prompt
    set Psw {} ; if [ Dlg ] { set Psw "\004" };#fi
    return "${Psw}\n"
  };# Psw

  proc FSel {} {
    global RetC
    set F [ tk_getOpenFile -title {tmount - Select a key file} ]
    if { $F eq {} } { set RetC 1 ; puts stderr Cancelled. };#fi
    return $F
  };# FSel

  proc Prop { Dev N } { ;# get property for device
    if [ catch { exec lsblk -dpno $N $Dev } P ] { set P {} };#fi
    return [ set P ]
  };# Prop

  set RetC 1 ; set Err {} ; set Dev [ lindex $argv end ] ; set Cmd pmount

  set Mode [
    set M [ lindex $argv 0 ]
    if { $argc == 2 && $M in { -k -i -a } } { string range $M 1 1
    } elseif { $argc == 1 } { expr {{a}}
    };#fi
  ]

  if { $Mode eq {} } {
    set X {Usage: %s [-k|-i|-a] {device|file}}
    set Err [ format $X [ file tail [ info script ] ] ]
  } else {
    wm withdraw . ; wm title . tmount ; label .lbl ; frame .btn
    wm iconphoto . [ image create photo -file /usr/share/pixmaps/tmount.png ]
    bind . <Escape> { set RetC 1 } ; bind . <Destroy> { set RetC 1 }
    button .ok  -text  OK     -command { set RetC 0 }
    button .esc -text  Cancel -command { set RetC 1 }
    bind   .ok  <Return> { set RetC 0 } ; bind .esc <Return> { set RetC 1 }
    pack   .esc .ok -side right -in .btn
    pack   .btn -fill x -side bottom -padx 2 ; pack .lbl -fill x -padx 2
  };#fi

  if { $Mode eq {a} } {
    .lbl configure -text {LUKS passphrase input method:}
    frame .ent ; bind .ent <Return> { set RetC 0 }
    radiobutton .ent.i -var Mode -val i -text Interactive
    radiobutton .ent.k -var Mode -val k -text {Key File}
    pack .ent.i .ent.k -side left ; .ent.i select ; pack .ent -fill x -padx 2
    if [ Dlg ] { set Mode {} };#fi
    catch { destroy .ent }
  };#fi

  if { $Mode eq {k} } { set Mode [ FSel ] ; lappend Cmd -p $Mode };#fi

  if { $Mode ne {} } {

    entry .ent -show {*} -textvar Psw ; bind .ent <Return> { set RetC 0 }
    pack  .ent -fill x -padx 2
    set timeout -1 ; log_user 0 ; set Err {} ; set LC $env(LC_ALL)

    set env(LC_ALL) {C} ; spawn {*}$Cmd $Dev ; set env(LC_ALL) $LC

    expect {
      {Enter passphrase for *: } {
        exp_send -- [ Psw "Enter LUKS passphrase for ${Dev}" ] ; exp_continue
      }
      full_buffer { append Err $expect_out(buffer) ; exp_continue }
      eof { append Err $expect_out(buffer) }
    };#done

    set RetC [ lrange [ wait ] 3 3 ]

  };#fi

  if { $RetC } { puts stderr $Err
  } else {
    regexp -linestop {.*$} [ exec lsblk -plno NAME $Dev ] Lnk
    set Map [ file tail   $Lnk ] ; set D {Device}
    set R [ exec realpath $Lnk ] ; set B [ file tail $R ]
    set S [ Prop $R SIZE   ] ; set M [ Prop $R MOUNTPOINT ]
    set L [ Prop $R LABEL  ] ; regsub {^$} $L {(no label)} L
    set F [ Prop $R FSTYPE ] ; set P {mounted on} ; set T {mapped to}
    set X  "%s %s %s %s\n%s -> %s\n%s (%s, \[%s], %s)\n%s %s\n"
    puts [ format $X $D $Dev $T $Map $Lnk $R $B $F $L $S $P $M ]
  };#fi

exit $RetC
