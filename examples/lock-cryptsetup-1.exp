#!/usr/bin/env expect

  set Cmd /sbin/cryptsetup
  set MsD /usr/share/tmount/translations/ ;# i18n directory
  package require msgcat ; namespace import msgcat::mc
  catch { msgcat::mcload $MsD }

  proc Dlg { Res args } {
    upvar $Res R
    set L { --title tmount --window-icon /usr/share/pixmaps/tmount.png }
    set R [
      if [ set C [ catch { exec qarma 2>/dev/null {*}$L {*}$args } S ] ] {
        puts stderr [ regsub {^child .*abnormally$} $S [ mc Cancelled. ] ]
      } else { set S
      };#fi
    ]
    return $C
  };# Dlg

  proc Psw { Prompt } {
    if [ Dlg P --entry --hide-text --text $Prompt ] { set P "\004" };#fi
    return "${P}\n"
  };# Psw

  proc ShLit { S } { return "'[ regsub -all {'+} $S {'"&"'} ]'"
  };# ShLit - substitutes a literal in 'su -c' (or 'sh -c') argument

  proc Prop { Dev N } { ;# get property for device
    if [ catch { exec lsblk -dpno $N $Dev } P ] { set P {} };#fi
    return [ set P ]
  };# Prop

  set RetC 0 ; set Map [ lindex $argv 0 ] ; set Lnk "/dev/mapper/${Map}"
  append Cmd " close -- [ ShLit $Map ]"
  set C TMOUNT_Unmount_command
  set C [ expr { [ info exist env($C) ] ? $env($C) : {} } ]
  set M [ mc {Config error: unmounting disabled} ]
  if { $C eq {} } { lappend C sh -c { ! printf '%s\n' "${0}" >&2 } $M };#fi

  while { ! $RetC && [ set M [ Prop $Lnk MOUNTPOINT ] ] ne {} } {
    set RetC [ catch { exec -- {*}$C $M } Err ]
  };#done

  if { ! $RetC && [ file exist $Lnk ] } {

    set timeout -1 ; log_user 0 ; set Err {} ; set LC $env(LC_ALL)

    set env(LC_ALL) {C} ; spawn su -c $Cmd ; set env(LC_ALL) $LC

    expect {
      {Password: } {
        exp_send -- [ Psw "su: [ mc {Enter root password} ]" ]
        exp_continue
      }
      full_buffer { append Err $expect_out(buffer) ; exp_continue }
      eof { append Err $expect_out(buffer) }
    };#done

    set RetC [ lrange [ wait ] 3 3 ]

  };#fi

  if { $RetC } { puts stderr $Err } else { puts "${Map} [ mc released. ]"
  };#fi

exit $RetC
