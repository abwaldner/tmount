#!/usr/bin/env expect

  set Cmd /sbin/cryptsetup

  proc Dlg { Res args } {
    upvar $Res R
    set L { --title tmount --window-icon /usr/share/pixmaps/tmount.png }
    set R [
      if [ set C [ catch { exec qarma 2>/dev/null {*}$L {*}$args } S ] ] {
        puts stderr [ regsub {^child .*abnormally$} $S Cancelled. ]
      } else { set S
      };#fi
    ]
    return $C
  };# Dlg

  proc Mode {} {
    Dlg M --forms --text {LUKS passphrase input method:} \
          --add-combo Select --combo-values {Interactive|Key File}
    return [ string tolower [ string range $M 0 0 ] ]
  };# Mode

  proc Psw { Prompt } {
    if [ Dlg P --entry --hide-text --text $Prompt ] { set P "\004" };#fi
    return "${P}\n"
  };# Psw

  proc FSel {} {
    Dlg F --file-selection --title {tmount - Select a key file}
    return $F
  };# FSel

  proc ShLit { S } { return "'[ regsub -all {'+} $S {'"&"'} ]'"
  };# ShLit - substitutes a literal in 'su -c' (or 'sh -c') argument

  proc HasFS { Dev } {
    catch { exec udevadm info $Dev } P
    return [ regexp -line {^E: ID_FS_USAGE=filesystem$} $P ]
  };# HasFS

  proc GenMN { Dev } { ;# generate cryptsetups map name
    set M [ file tail $Dev ]
    set M [ regsub -all {[^[:alnum:]#+-.:=@]|[^[:ascii:]]} $M {_} ]
    return [ exec mktemp -u -p /dev/mapper "_${M}-XXX" ]
  };# GenMN

  proc Prop { Dev N } { ;# get property for device
    if [ catch { exec lsblk -dpno $N $Dev } P ] { set P {} };#fi
    return [ set P ]
  };# Prop

  set RetC 1 ; set Err {} ; set Dev [ lindex $argv end ]
  set Lnk  [ GenMN $Dev ] ; set Map [ file tail $Lnk ]
  append Cmd " open [ ShLit $Dev ] [ ShLit $Map ]"
  set Mode [
    set M [ lindex $argv 0 ]
    if { $argc == 2 && $M in { -k -i -a } } { string range $M 1 1
    } elseif { $argc == 1 } { expr {{a}}
    };#fi
  ]

  if { $Mode eq {} } {
    set X {Usage: %s [-k|-i|-a] {device|file}}
    set Err [ format $X [ file tail [ info script ] ] ]
  };#fi

  if { $Mode eq {a} } { set Mode [ Mode ] };#fi

  if { $Mode eq {k} } { set Mode [ FSel ] ; append Cmd " -d [ ShLit $Mode ]"
  };#fi

  if { $Mode ne {} } {

    set timeout -1 ; log_user 0 ; set Err {} ; set LC $env(LC_ALL)

    set env(LC_ALL) {C} ; spawn su -c $Cmd ; set env(LC_ALL) $LC

    expect {
      {Password: } {
        exp_send [ Psw {su: Enter root password} ] ; exp_continue
      }
      {Enter passphrase for *: } {
        exp_send [ Psw "Enter LUKS passphrase for ${Dev}" ] ; exp_continue
      }
      full_buffer { append Err $expect_out(buffer) ; exp_continue }
      eof { append Err $expect_out(buffer) }
    };#done

    set RetC [ lrange [ wait ] 3 3 ]

    if { ! $RetC && [ HasFS $Lnk ] } {
      set C TMOUNT_Mount_command
      set C [ expr { [ info exist env($C) ] ? $env($C) : {} } ]
      if { $C ne {} } { set RetC [ catch { exec -- {*}$C $Lnk } Err ]
      } else { set RetC 1 ; set Err {Config error: mounting disabled}
      };#fi
    };#fi

  };#fi

  if { $RetC } { puts stderr $Err
  } else {
    set R [ exec realpath $Lnk ] ; set B [ file tail $R ]
    set F [ Prop $R FSTYPE ] ; regsub {^$} $F {(no FS)}    F
    set L [ Prop $R LABEL  ] ; regsub {^$} $L {(no label)} L
    set S [ Prop $R SIZE   ] ; set M [ Prop $R MOUNTPOINT ]
    set X "Device %s mapped to %s\n%s -> %s\n"
    append X "%s (%s, \[%s], %s)\nmounted on %s"
    puts [ format $X $Dev $Map $Lnk $R $B $F $L $S $M ]
  };#fi

exit $RetC
