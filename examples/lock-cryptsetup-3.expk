#!/usr/bin/env wish

  package require Expect

  set Cmd /sbin/cryptsetup

  proc Dlg {} {
   global RetC
   set x [ expr { [ winfo screenwidth   . ] - [ winfo reqwidth  . ] } ]
   set x [ expr { $x / 2 - [ winfo vrootx . ] } ]
   set y [ expr { [ winfo screenheight  . ] - [ winfo reqheight . ] } ]
   set y [ expr { $y / 2 - [ winfo vrooty . ] } ]
   wm geom . +$x+$y ; wm deiconify . ; focus .ent ; tkwait var RetC
   catch { wm withdraw . }
   if { $RetC } { puts stderr Cancelled. };#fi
   return $RetC
  };# Dlg

  proc Psw { Prompt } {
    global Psw
    .lbl configure -text $Prompt
    set Psw {} ; if [ Dlg ] { set Psw "\004" };#fi
    return "${Psw}\n"
  };# Psw

  proc Prop { Dev N } { ;# get property for device
    if [ catch { exec lsblk -dpno $N $Dev } P ] { set P {} };#fi
    return [ set P ]
  };# Prop

  set RetC 0 ; set Map [ lindex $argv 0 ] ; set Lnk "/dev/mapper/${Map}"
  lappend Cmd close -- $Map
  set C TMOUNT_Unmount_command
  set C [ expr { [ info exist env($C) ] ? $env($C) : {} } ]
  set M {Config error: unmounting disabled}
  if { $C eq {} } { lappend C sh -c { ! printf '%s\n' "${0}" >&2 } $M };#fi

  while { ! $RetC && [ set M [ Prop $Lnk MOUNTPOINT ] ] ne {} } {
    set RetC [ catch { exec -- {*}$C $M } Err ]
  };#done

  if { ! $RetC && [ file exist $Lnk ] } {

    wm withdraw . ; wm title . tmount ; label .lbl ; frame .btn
    wm iconphoto . [ image create photo -file /usr/share/pixmaps/tmount.png ]
    bind . <Escape> { set RetC 1 } ; bind . <Destroy> { set RetC 1 }
    button .ok  -text OK     -command { set RetC 0 }
    button .esc -text Cancel -command { set RetC 1 }
    bind   .ok  <Return> { set RetC 0 } ; bind .esc <Return> { set RetC 1 }
    pack   .esc .ok -side right -in .btn
    entry  .ent -show {*} -textvar Psw  ; bind .ent <Return> { set RetC 0 }
    pack   .lbl .ent .btn -fill x -padx 2
    set timeout -1 ; log_user 0 ; set Err {}

    set env(LC_ALL) {C} ; spawn sudo {*}$Cmd

    expect {
      {Password: } {
        exp_send [ Psw {sudo: Enter your password} ] ; exp_continue
      }
      full_buffer { append Err $expect_out(buffer) ; exp_continue }
      eof { append Err $expect_out(buffer) }
    };#done

    set RetC [ lrange [ wait ] 3 3 ]

  };#fi

  if { $RetC } { puts stderr $Err } else { puts "${Map} released." };#fi

exit $RetC
